{"version":3,"sources":["components/board.js","components/win.js","components/game.js","App.js","reportWebVitals.js","index.js"],"names":["Board","props","flip","tilesArray","clicked","matched","boardLayout","map","tile","index","className","id","onClick","handleClick","WinMessage","gameOver","restart","shuffle","array","arr","i","length","j","Math","floor","random","temp","Game","animals","useState","setTilesArray","setClicked","calculating","setCalculating","setMatched","setGameOver","useEffect","first","indexOf","last","lastIndexOf","setTimeout","m","slice","includes","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f74157ae.chunk.js","sourcesContent":["import React from 'react';\nimport './board.css';\n\nfunction Board(props) {\n    \nconst { flip, tilesArray, clicked, matched } = props;\n\nconst handleClick = (index) => {\n    if (typeof(flip) === 'function') {\n        flip(index);\n    }\n}\n\nconst boardLayout = tilesArray.map(\n    (tile, index) => {\n        return (\n            <div className='tile-container'\n                    key={index}\n                    >\n                <div\n                    className={`tile ${clicked[index] ? 'flipped' : ''} ${matched[index] ? 'matched' : ''}`}\n                    id={index}\n                    onClick = {() => handleClick(index)}\n                    >\n                    <div className={`${tile} front`}>\n                        \n                    </div>\n                    <div className={`back ${tile}`}>\n\n                    </div>\n                    \n                </div>\n            </div>\n        )\n    }\n    );\n\nreturn (\n    \n    <div className='container'>\n        {boardLayout}\n    </div>\n)\n}\n\nexport default Board;","import React from 'react';\nimport './win.css';\n\nfunction WinMessage(props) {\n\n    const { gameOver, restart } = props;\n\n    const handleClick = () => {\n        if (typeof(restart) === 'function') {\n            restart();\n        }\n    }\n\n    return (\n        <div className='winMessage'>\n            <h1\n                className={`${gameOver ? 'gameOver' : 'gameOn'}`}\n            > Well Done!\n            </h1>\n            <button\n                className={`${gameOver ? 'gameOver' : 'gameOn'}`}\n                onClick={() => handleClick()}\n            >Play Again?</button>\n        </div>\n    )\n}\n\nexport default WinMessage;","import React, {useState, useEffect } from 'react';\nimport Board from './board';\nimport WinMessage from './win';\n\nfunction shuffle(array) {\n    let arr = [...array];\n    for (let i=arr.length-1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    return arr;\n}\n\nfunction Game() {\n\n    const animals = ['cow', 'cow', 'pig', 'pig', 'horse', 'horse', 'sheep', 'sheep'];\n    const [ tilesArray, setTilesArray ] = useState(shuffle(animals));\n    // console.log(tilesArray);\n    const [ clicked, setClicked ] = useState(animals.map(() => false));\n    const [ calculating, setCalculating ] = useState(false);\n    const [ matched, setMatched ] = useState(animals.map(() => false));\n    const [ gameOver, setGameOver ] = useState(false);\n    \n    function flip(index) {   \n        if (calculating || clicked[index]) {\n            return;\n        }  else {\n            setClicked([\n                ...clicked.slice(0, index),\n                true,\n                ...clicked.slice(index + 1),\n            ]);\n        }\n    }\n\n    function restart() {\n        setClicked(animals.map(() => false));\n        setMatched(animals.map(() => false));\n        setGameOver(false);\n        setTilesArray(shuffle(animals));\n    }\n\n    useEffect(() => {\n        let first = clicked.indexOf(true);\n        let last = clicked.lastIndexOf(true);\n        // console.log(first, last);\n        if (first === last) {\n            return;\n        } else if (first !== last && first >= 0 && last >= 0) {\n            if (tilesArray[first] === tilesArray[last]) {\n                setCalculating(true);\n                setTimeout(() => {\n                    setClicked(tilesArray.map(() => false));\n                    setMatched(m => [\n                        ...m.slice(0, first),\n                        true,\n                        ...m.slice(first + 1, last),\n                        true,\n                        ...m.slice(last + 1),\n                    ]);\n                    setCalculating(false);\n                }, 1000);\n            } else {\n                setCalculating(true);\n                setTimeout(() => {\n                    setClicked(tilesArray.map(() => false));\n                    setCalculating(false);\n                }, 1000);\n            }\n        }\n        \n    }, [clicked, tilesArray]);\n\n    useEffect(() => {\n        if (matched.includes(false)) {\n            setGameOver(false);\n        } else {\n            setGameOver(true);\n        }\n    }, [matched]);\n        \n    return (\n        <div>\n            <h1>Animal Pairs</h1>\n            <h2>Can You Find All The Matches?</h2>\n            <Board \n                flip={flip}\n                clicked={clicked}\n                tilesArray={tilesArray}\n                matched={matched}\n            />\n            {\n                gameOver && (\n                    <WinMessage\n                        gameOver={gameOver}\n                        restart={restart}\n                    />\n                )\n            }\n        </div>\n    )\n}\n\nexport default Game;","import './App.css';\nimport Game from './components/game.js';\nfunction App() {\n  return (\n    <div>\n      <div className=\"App\">\n        <Game />\n      </div>\n      <footer><a href='https://www.freepik.com/vectors/tree'>Tree vector created by brgfx - www.freepik.com</a></footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}